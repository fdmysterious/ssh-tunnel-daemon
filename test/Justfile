docker_image     := "valbrout_scripts:ssh_tunnel_test_env"
source_container := "test_source"

build:
	docker buildx build --load -t {{docker_image}} -f Dockerfile .

start_test_container:
	docker run --rm -d --cap-add AUDIT_CONTROL {{docker_image}}

stop id:
	docker stop {{id}}

# https://stackoverflow.com/questions/17157721/how-to-get-a-docker-containers-ip-address-from-the-host
get_ip id:
	@docker inspect -f "{{{{range.NetworkSettings.Networks}}{{{{.IPAddress}}{{{{end}}" {{id}}

create_user cid test_user_name:
	docker exec -it {{cid}} ash -c "adduser -D {{test_user_name}} && echo \"{{test_user_name}}:test\" | chpasswd"

create_ssh_key cid test_user_name:
	docker exec -u {{test_user_name}} -it {{cid}} ash -c "ssh-keygen -q -t ed25519 -f ~/.ssh/id_rsa -N ''"

retrieve_ssh_key cid test_user_name:
	@docker exec -u {{test_user_name}} -it {{cid}} cat "/home/{{test_user_name}}/.ssh/id_rsa.pub"

add_key_to_container cid test_user_name key:
	docker exec -it -u {{test_user_name}} {{cid}} ash -c "echo '{{key}}' >> /home/{{test_user_name}}/.ssh/authorized_keys"

copy_script cid test_user_name:
	docker cp ../ssh_tunnel.py {{cid}}:/home/{{test_user_name}}/ssh_tunnel.py

#start_tunnel cid test_user_name remote_port remote_user remote_host:
#	# https://stackoverflow.com/questions/29704358/how-to-keep-program-running-in-background-in-ash-shell
#	docker exec -d -it -u {{test_user_name}} {{cid}} python3 /home/{{test_user_name}}/ssh_tunnel.py --remote_port {{remote_port}} --remote_user {{remote_user}} --remote_host {{remote_host}}

start_tunnel cid test_user_name remote_port remote_user remote_host:
	docker exec -d -it -u {{test_user_name}} {{cid}} sh /start_process.sh python3 /home/{{test_user_name}}/ssh_tunnel.py --remote_port {{remote_port}} --remote_user {{remote_user}} --remote_host {{remote_host}}

stop_tunnel cid:
	docker exec -it {{cid}} ash -c 'kill -SIGINT `cat /tmp/pidfile`'

get_tunnel_logs cid test_user_name:
	docker exec -it -u {{test_user_name}} {{cid}} cat /tmp/stderr.log

try_connection cid test_user_name remote_port remote_user host:
	docker exec -it -u {{test_user_name}} {{cid}} ssh -p {{remote_port}} -o StrictHostKeyChecking=accept-new -q {{remote_user}}@{{host}} exit

shell cid:
	docker exec -it {{cid}} ash
	
test:
	python3 test_script.py

stop_all:
	docker stop `docker ps -q --filter "ancestor={{docker_image}}"`

shift_key:
	#!/bin/env python3
	input  = input()
	tokens = input.split(" ")

	def shift_char(x):
		shift1 = "abcdefghijklmnopqrstuvwxyz"
		shift2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		shift3 = "0123456789"

		if x in shift1:
			idx = shift1.index(x)
			return shift1[(idx+2)%len(shift1)]
		elif x in shift2:
			idx = shift2.index(x)
			return shift2[(idx+9)%len(shift2)]
		elif x in shift3:
			idx = shift3.index(x)
			return shift3[(idx+3)%len(shift3)]
		else:
			return x

	print(f"{tokens[0]} {tokens[1]} {''.join(map(shift_char, tokens[2]))}")


cat_known_hosts cid test_user_name:
	docker exec -it -u {{test_user_name}} {{cid}} cat /home/{{test_user_name}}/.ssh/known_hosts

shift_known_hosts cid test_user_name:
	#just cat_known_hosts {{cid}} {{test_user_name}} | just shift_key | docker exec -i -u {{test_user_name}} {{cid}} sh -c "cat > /home/{{test_user_name}}/.ssh/known_hosts"
	docker cp {{cid}}:/home/{{test_user_name}}/.ssh/known_hosts /tmp/known_hosts
	cat /tmp/known_hosts | just shift_key | docker exec -i -u {{test_user_name}} {{cid}} sh -c "cat > /home/{{test_user_name}}/.ssh/known_hosts"

get_fingerprint cid test_user_name:
	docker exec -it -u {{test_user_name}} {{cid}} ash -c "ssh-keyscan localhost | ssh-keygen -lf -"
